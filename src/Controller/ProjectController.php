<?php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;
use App\Entity\Project;
use App\Form\ProjectType;

class ProjectController extends Controller
{
    public function new(Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        $project = new Project();
        $form = $this->createForm(ProjectType::class, $project);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $project->getThumbnail();

            $title = $project->getTitle();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where thumbnails are stored
            $file->move(
                $this->getParameter('thumbnail_directory'),
                $fileName
            );

            // updates the 'thumbnail' property to store the image file name
            // instead of its contents
            $project->setThumbnail($fileName);
            $project->setTitle($title);

            // ... persist the $product variable or any other work
            $em->persist($project);

            // actually executes the queries (i.e. the INSERT query)
            $em->flush();

            return $this->redirect($this->generateUrl('ProjectsRoute'));
        }

        return $this->render('admin/adminProjects.html.twig', array(
            'form' => $form->createView(),
        ));
    }

    public function view()
    {
        $projectRepo = $this->getDoctrine()->getRepository(Project::class);
        $projects = $projectRepo->findAll();

        //var_dump($projects);

        return $this->render('home/projects.html.twig', [
            'projects' => $projects,
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}